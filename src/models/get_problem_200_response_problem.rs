/*
 * WASM OJ Wonderland API
 *
 * You can interact with WASM OJ Wonderland through this API
 *
 * The version of the OpenAPI document: 0.0.4
 * Contact: jacob@csie.cool
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetProblem200ResponseProblem {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "policy")]
    pub policy: Vec<crate::models::GetProblem200ResponseProblemPolicyInner>,
    #[serde(rename = "testcase")]
    pub testcase: Vec<crate::models::GetProblem200ResponseProblemTestcaseInner>,
    #[serde(rename = "input", skip_serializing_if = "Option::is_none")]
    pub input: Option<String>,
    #[serde(rename = "output", skip_serializing_if = "Option::is_none")]
    pub output: Option<String>,
    #[serde(rename = "hint", skip_serializing_if = "Option::is_none")]
    pub hint: Option<String>,
}

impl GetProblem200ResponseProblem {
    pub fn new(name: String, description: String, policy: Vec<crate::models::GetProblem200ResponseProblemPolicyInner>, testcase: Vec<crate::models::GetProblem200ResponseProblemTestcaseInner>) -> GetProblem200ResponseProblem {
        GetProblem200ResponseProblem {
            name,
            tags: None,
            description,
            policy,
            testcase,
            input: None,
            output: None,
            hint: None,
        }
    }
}


